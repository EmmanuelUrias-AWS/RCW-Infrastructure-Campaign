AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: S3 Buckets and Lambda Functions for Workload Application using AWS SAM

Parameters:
  Environment:
    Type: String
    Default: Dev
    Description: Environment name for the VPC

Globals:
  Function:
    Runtime: python3.8
    Handler: index.lambda_handler
    Timeout: 30
    Tags:
      Environment: !Ref Environment

Resources:
  ### S3 Bucket for app (Website bucket with public access) ###
  ClientBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rcw-webpage
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ### S3 Bucket for logs (Secured) ###
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rcw-log-bucket
      AccessControl: Private
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ### Lambda Execution Role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        # Basic Lambda logging policy
        - PolicyName: BasicLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

        # DynamoDB Access Policy (optional if you still use DynamoDB)
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: "arn:aws:dynamodb:*:*:table/AdminTable"

        # Cognito User Pool Permissions
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:*"
                Resource: "arn:aws:cognito-idp:*:*:userpool/us-west-1_lJ8JcxPXT"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ### Lambda Function for PayPal Processor ###
  PayPalProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PayPal-Processor
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: s3://rcw-code-bucket/paypal-processor/paypal-processor.zip
      Tags:
        Environment: !Ref Environment

  ### Lambda Function for Client Public Backend ###
  ClientPublicBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ClientPublicBackendFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: s3://rcw-code-bucket/client-public-backend/client-public-backend.zip
      Events:
        SignupPost:
          Type: Api
          Properties:
            Path: /signup
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        SignupOptions:
          Type: Api
          Properties:
            Path: /signup
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmUser:
          Type: Api
          Properties:
            Path: /confirm
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmUserOptions:
          Type: Api
          Properties:
            Path: /confirm
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        LoginUser:
          Type: Api
          Properties:
            Path: /login
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        LoginUserOptions:
          Type: Api
          Properties:
            Path: /login
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ForgotPassword:
          Type: Api
          Properties:
            Path: /forgot-password
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ForgotPasswordOptions:
          Type: Api
          Properties:
            Path: /forgot-password
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmForgotPassword:
          Type: Api
          Properties:
            Path: /confirm-forgot-password
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmForgotPasswordOptions:
          Type: Api
          Properties:
            Path: /confirm-forgot-password
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId: !Ref ClientPublicBackendApi
            RequestParameters:
              method.request.querystring.email: true
        UpdateUser:
          Type: Api
          Properties:
            Path: /user
            Method: PATCH
            RestApiId: !Ref ClientPublicBackendApi
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: DELETE
            RestApiId: !Ref ClientPublicBackendApi
            RequestParameters:
              method.request.querystring.email: true
        UsersOptions:
          Type: Api
          Properties:
            Path: /user
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
      Tags:
        Environment: !Ref Environment

  ### API Gateway for Client Public Backend ###
  ClientPublicBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ClientPublicBackendApi
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods:
          - GET
          - POST
          - PATCH
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowOrigin: '*'
      Tags:
        Environment: !Ref Environment

Outputs:
  ClientBucketName:
    Value: !Ref ClientBucket
    Description: "S3 Bucket for the client application"

  LogBucketName:
    Value: !Ref LogBucket
    Description: "S3 Bucket for logs"

  PayPalProcessorLambdaFunctionArn:
    Value: !GetAtt PayPalProcessorFunction.Arn
    Description: "Lambda function ARN for PayPal Processor"

  ClientPublicBackendLambdaFunctionArn:
    Value: !GetAtt ClientPublicBackendFunction.Arn
    Description: "Lambda function ARN for Client Public Backend"

  ClientPublicBackendApiInvokeURL:
    Value: !Sub "https://${ClientPublicBackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Description: "Invoke URL for the Client Public Backend API"
